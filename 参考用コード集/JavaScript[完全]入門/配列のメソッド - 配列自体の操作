

        ==  join  ==
        
        
// 配列の作成
const arr = ['コーヒー', '紅茶', '煎茶'];

// join()で結合してコンソールに出力
console.log(arr.join());
console.log(arr.join(' / '));
console.log(arr.join(' '));

// 結果
 コーヒー,紅茶,煎茶
 コーヒー / 紅茶 / 煎茶
 コーヒー 紅茶 煎茶
 
 
 ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
 
 
        ==  fill  ==
        

// 配列を作成してコンソールに出力
const arr1 = new Array(4);
console.log(arr1);

// fill()で埋めて出力
const arr2 = arr1.fill('★');
console.log(arr1);
console.log(arr2);

// 指定範囲を埋めて
const arr3 = arr1.fill('☆', 1, 3);
console.log(arr1);
console.log(arr3);

// 結果
 (4) [empty × 4]
 (4) ['★', '★', '★', '★']
 (4) ['★', '★', '★', '★']
 (4) ['★', '☆', '☆', '★']
 (4) ['★', '☆', '☆', '★']
 
// 解説
fill()で指定するのは、インデックスではなく、" 範囲 "である
" １番目の範囲 "とは、インデックス番号[0][1]のあいだのことをいう
「1, 3」の範囲とはつまり、[0][1]のあいだから、[2][3]のあいだのことなので、配列に置き換えると、要素 [2番目] と [3番目] を表している


ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
 
 
        ==  reverse ==


// 配列を作成してコンソールに出力
const arr = [1, 2, 3, 4];
console.log(arr);

// reverse()で向きを逆転させてコンソールに出力
arr.reverse();
console.log(arr);

// 結果
 (4) [1, 2, 3, 4]
 (4) [4, 3, 2, 1]


ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー


        ==  flat  ==


// 配列を作成してコンソールに出力
const arr = [1, 2, [3, 4], [[5, 6], [[7, 8]]]];
console.log(arr);

// flat()で平坦化してコンソールに出力
console.log(arr.flat());
console.log(arr.flat(2));
console.log(arr.flat(Infinity));

// 元の配列をコンソールに出力
console.log(arr);

// 結果
 (4) [1, 2, [3, 4], [[5, 6], [[7, 8]]]]
 (6) [1, 2, 3, 4, [[5, 6], [[7, 8]]]
 (7) [1, 2, 3, 4, 5, 6, [7, 8]]
 (8) [1, 2, 3, 4, 5, 6, 7, 8]
 (4) [1, 2, [3, 4], [[5, 6], [[7, 8]]]]

// 解説
flat()で平坦化する深さとは、段階のことである
「 1 」を指定されたら、１段階目の深さまでの配列が均される
「 ２ 」を指定されたら、２段階目の深さまでの配列が均される
「 Infinity 」を指定されたら、無限段階目の深さまでの配列が均される


