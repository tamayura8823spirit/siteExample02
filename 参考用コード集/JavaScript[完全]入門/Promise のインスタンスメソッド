

*  .then() は正常時の処理、
   .catch() は異常時の処理、
   .finally() は両方でおこなう最終処理、と使い分ける

*  Promise のコールバック関数内で reject() が実行されたら、
   reject() に対応した処理まで一気に進む
  （あいだにある resolve に対応した処理は全て飛ばされる）


- - - - - - 


        "  reject() に対応した処理まで一気に進む例  "


// 待機用の関数
function wait(msg , isOk = true) {
  return new Promise((resolve , reject) => {
    setTimeout(() => {
      console.log(msg);
      if (isOk) {
        resolve();
      } else {
        reject();
      }
    }, 100);
  })
}

wait('処理A', false)
.then(d => {
  return wait('処理B 成功');
}, d => {
  return wait('処理B 失敗');
})
.then(d => {
  return wait('処理C 成功', false);
})
.then(d => {
  return wait('処理D 成功');
})
.then(d => {
  return wait('処理E 成功');
})
.catch(d => {
  return wait('処理F 失敗');
})
.finally(d => {
  return wait('処理G 終了');
});



// 結果
処理A
処理B 失敗
処理C 成功
処理F 失敗
処理G 終了


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝


* また、コールバック関数の中で throw 文を使うと、
   reject() と同じように動作し、
   reject() に対応した処理まで動作が飛ぶ


- - - - - -


        "  throw 文を使い、処理を飛ばす例  "


// 待機用の関数
function wait(msg) {
  return new Promise((resolve , reject) => {
    setTimeout(() => {
      console.log(msg);
      resolve();
    }, 100);
  })
}

wait('処理A')
.then(d => {
  throw new Error('Oh!'); // 例外を起こす
  return wait('処理B');
})
.then(d => {
  return wait('処理C');
})
.then(d => {
  return wait('処理D');
})
.catch(d => {
  return wait('処理E');
})
.finally(d => {
  return wait('処理F');
})



// 結果
処理A
処理E
処理F



