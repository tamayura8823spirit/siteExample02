

* 円弧のパスを作るには、 .arc() を使う

* 角度の単位は" ラジアン "であらわし、角度は右端からはじまり、" 2π "で１周する
   Math.PI が π をあらわすので、１周の角度は 「 2 * Math.PI 」 となる
  360度表記であらわすときは、 「 360 / 180 * Math.PI 」 と書く


- - - - - -


[ 円弧のパスを作成するメソッド ]
.arc( x, y, r, s, e, a )   ・・・   座標x,y を中心に、 半径r 、 開始角度s 、 終了角度e 、 の円弧を作る
                                　パスは時計回りに作られ、 a に true を設定すると反時計回りになる、 a は省略可能

.arcTo( x1, y1, x2, y2, r )   ・・・   直前の座標 x0,y0 から、座標 x1,y1 にパスを伸ばしていく
                                   　そして、半径 r の円弧を描くように、座標 x2,y2 にいたるパスを引く

- - - - - - 


[ 例文 ]


• HTML

  <canvas id="canvas" width="400" height="300"></canvas>


• JavaScript


const canvas = document.querySelector('#canvas');
const context = canvas.getContext('2d');

// 設定
context.fillStyle = '#faa';
context.strokeStyle = '#44f';
context.lineWidth = 8;
context.lineCap = 'round';

// --------------------------
// パスを作る 時計回り
context.beginPath();
context.arc(100, 150, 80, 0, 240 / 180 * Math.PI);
context.fill();
context.stroke();

// 回転の視点を描画
context.strokeRect(175, 145, 10, 10);
//---------------------------

//---------------------------
// パスを作る 反時計回り
context.beginPath();          
context.arc(150, 100, 80, 0, 240 / 180 * Math.PI, true);
context.fill();
context.stroke();

context.strokeRect(225, 95, 10, 10);
//---------------------------

// パスを作る ぐるっと１周
context.beginPath();
context.arc(300, 200, 80, 0, 360 / 180 * Math.PI);
context.fill();
context.stroke();

context.strokeRect(375, 195, 10, 10);



