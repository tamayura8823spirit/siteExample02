

* 第一引数には 「監視したいイベント」、第二引数には 「実行する関数」、第三引数には 「キャプチャーフェーズでイベントを伝播させるか否か」 を真偽値で設定する
* 渡すのは無名関数でもいいが、外出しすることで、別のイベントリスナー内で使い回せたり、何かと便利になる
* 対象になっている 「イベント」 を関数内で使用したい場合は、 this オブジェクトを使用することで、登録されたHTMLのDOMを This に格納することができる
*  .addEventListener は複数回使えるので、同じイベントに対して複数のイベントを登録することができる。  また片方だけリムーブ（解除）することもできる


	 - - - - - - - - - - - - - - -
	【 キャプチャーフェーズとは 】
	たとえば以下のHTML があったとする
	 - - - - -
	<p>  <img  src="./image/img.jpg">  </p>
	 - - - - -
	このとき <img> 要素がクリックされたとき、クリックイベントは最初に <img> に対して発生し、次にそれを内包している <p> 要素に対しても発生する
	このように、子要素からその親要素へとイベントが伝播していくことを 「バブリングフェーズでのイベントの伝播」 と呼ぶ

	逆に、親要素からその子孫要素の方へ向かってイベントが伝播する場合は 「キャプチャーフェーズでのイベントの伝播」 と呼び、
	これを 「させるか否か」 を、第３引数の「真偽値」で設定できる

	つまり、addEventListener の第３引数に false を指定するかまたは省略した場合、最初にクリックされた要素そのものがイベントを検出するが、
	 true が指定されていた場合、それを包む親要素の方が先にイベントを検出する

	通常、イベントは 『クリックされた要素で最初に発生する』 方が都合がいいので、大抵は false で設定するか、省略する
	 - - - - - - - - - - - - - - -


ーーーーーーーーーーーーーーーーーーーーーーーー


  <button id="btn">ボタン</button>
  <h1>タイトル</h1>
  

  <script>
    
    const btn = document.querySelector( '#btn' ) ;
    const h1 = document.querySelector( 'h1' ) ;

    function changeColor() {
      this.style.color = 'red' ;
      h1.style.color = 'red' ; 
      console.log(1);
    }
    
    const changeBgColor = function() {
      h1.style.backgroundColor = 'green' ;
    }
    
    btn.addEventListener( 'click' , changeColor ) ;
    btn.removeEventListener( 'click' , changeColor ) ;
    btn.addEventListener( 'click' , changeBgColor ) ;

  </script>



// クリックした結果
changColor() の処理は行われず、
changeBgColor() だけが実行される



