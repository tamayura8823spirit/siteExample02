

• 特徴
 - JavaScript を使った通信処理では、このテキスト型式のデータを使うことが多い
 - 通常のオブジェクトのように、内容を入れ子にすることができる
 - [配列]や"文字列"、数値、真偽値、null を書くことができる
 -  undefined や関数は書けない
 - プロパティ名を 「"」 で囲い、文字列も 「"」 で囲う
 -  「'」 や、 「`」 は使えない
 - 標準ビルトインで JSON オブジェクトがあり、その静的メソッドで、 JSON をパースしたり文字列化できる


- - - - - -


[ 書き方 ]

{
  "menu" : [
    {"name" : "ホットコーヒー" , "price" : 450},
    {"name" : "アイスコーヒー" , "price" : 450},
    {"name" : "チョコケーキ" , "price" : 500},
    {"name" : "チーズケーキ" , "price" : 500}
  ]
}


- - - - - -


• 例文

const shop = {
  menu: [
    {name: 'ホットコーヒー', 'price': 450},
    {name: 'アイスコーヒー', 'price': 450},
    {name: 'チョコケーキ', 'price': 500},
    {name: 'チーズケーキ', 'price': 500}
  ],
  order: null,
  open: true
};

// 一つは文字列にして返す
console.log(JSON.stringify(shop));
// もう一つは" 整形 "して返す
console.log(JSON.stringify(shop, null, '  '));



// 結果
{"menu":[{"name":"ホットコーヒー","price":450},{"name":"アイスコーヒー","price":450},{"name":"チョコケーキ","price":500},{"name":"チーズケーキ","price":500}],"order":null,"open":true}
{
  "menu": [
    {
      "name": "ホットコーヒー",
      "price": 450
    },
    {
      "name": "アイスコーヒー",
      "price": 450
    },
    {
      "name": "チョコケーキ",
      "price": 500
    },
    {
      "name": "チーズケーキ",
      "price": 500
    }
  ],
  "order": null,
  "open": true
}



