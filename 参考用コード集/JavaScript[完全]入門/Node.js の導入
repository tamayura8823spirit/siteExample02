

* バージョンを確認する

- - - - - -

  node -v

  npm -v

- - - - - -



* サーバーとして動作するアプリケーションを作成する

- - - - - -

  npm init
  
  npm init -y

  * デフォルトの設定で自動で 「package.json」 を作りたいときは、 -y あるいは --yes のオプションをつける

- - - - - -



* 作成直後の 「package.json」 の中身

- - - - - -

{
  "name": "server",
  "main": "index.js",
}

  *  「y」 オプションで作ったときは、アプリケーションの名前 (name) は、ディレクトリの名前になっている
  * 続いて、 「index.js」 という空のファイルを作成する   （このファイルが、プログラムのエントリーポイント {開始される場所} になる）

- - - - - -



*  node.js でサーバーを作るために、最も人気のモジュールである" Express "をインストールする

- - - - - -

  npm install express
  
  *  「node_modules」 というディレクトリが作成され、必要なファイルがダウンロードされて配置される

- - - - - -



*  「index.js」 を開き、以下のプログラムを書く

- - - - - -

  // モジュールの読み込みと、Expressの開始
  const express = require('express');
  const app = express();

  // アクセス先
  app.get('/', function (req, res) {
    res.send('Hello World');
  });

  // サーバーの受付の開始
  app.listen(3000);

- - - - - -



*  Express をインストールしたサーバーで以下のコマンドを実行する

- - - - - -

  node .

  * このコマンドは、現在のフォルダにある 「package.json」 に従って、 Node.js がプログラムを実行する、という意味
  *  「package.json」 の main に書いてある 「index.js」 が読み込まれて、実行される

- - - - - -



*  Google Chrome で 「http://http://127.0.0.1:3000/」 を開いて 「Hello World」 と表示されれば、Webサーバーのプログラムを実行できている
* ローカルサーバーが必要な処理が出てきたときは、このファイルを改造して使う

*  「127.0.0.1」 とは、別名" ループバックアドレス "と呼ばれる、自分自身を示すIPアドレスのひとつ
* これを指定すると、自分の今使っているコンピュータのIPアドレスを指定したのと同じ意味になる



