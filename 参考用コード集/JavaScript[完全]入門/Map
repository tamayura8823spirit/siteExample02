

[ Map ]

* Map はObjectに似た、キーと値がセットになったデータ構造だが、この２つのあいだには、似て非なる特徴が存在する
* Map のインスタンスは、Object のインスタンスと違い、Object固有のプロパティがない
* Map のキーにはあらゆる値が設定できるが、Object のプロパティ名は基本的に文字列
* Map に入れた値が順序が保存されるが、Object に入れた値は順不同
* Map の項目数は size プロパティで手軽に得られる
* Map は反復処理を直接使えるが、Object はメソッドでキーや値を得なければならない
* Map の方が、処理の性能がよい





[ Mapのプロパティとメソッド ]

.size           |	データの数
- - - - - - - - - - - -
.clear()        |	データを全て削除
.set( k , v )   |	キー( k )と値( v )のセットをMapに登録、Map 自身を返す
.get( k )       |	( k )というキーの値を返す
.has( k )       |	キー( k )のデータがあるなら true、ないなら false を返す
.delete( k )    |	キー( k )のデータを削除、成功したら true、要素がなかったら false を返す
.keys()         |	キーを挿入順に取り出せる Iterator オブジェクトを返す
.values()       |	値を挿入順に取り出せる Iterator オブジェクトを返す
.entries()      |	[ キー , 値 ] を挿入順に取り出せる iterator オブジェクトを返す
.forEach( f )   |	関数( f )で全てのデータを処理する、関数( f )は、第１引数が値、第２引数がキー、第３引数が Map オブジェクト自身になる





[ 作成方法 ]

①

const myMap = new Map();									
myMap.set( 'coffee' , 'コーヒー' );
myMap.set( 'cake' , 'ケーキ' );

// Mapを作成したあとに、set()でプロパティを登録している



②

const myMap = new Map([
	[ 'coffee' , 'コーヒー' ] ,
	[ 'cake' , 'ケーキ' ]		]
);

// 直接、Map()の引数に配列を渡している


