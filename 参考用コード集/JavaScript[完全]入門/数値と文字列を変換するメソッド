

  [ 数値.toString(n) ]
数値を文字列に変換する方法   n で指定された "進数" で文字列に変換する
引数には 2 から 36 の進数が指定可能で、省略した場合は 10進数 となる
たとえば、　(15).toString()　と書くと10進数で解釈されるので、結果は　'15'　となる
15を()で囲んでいるのは、15.0 と解釈されてしまうのを防ぐため


  [ 数値.toFixed(n) ]
数値を文字列に変換する方法   n で指定された "桁数" の小数点数で文字列に変換する (省略すると 0桁 と解釈される) 
具体的には 123.456.toFixed(2) とすることで、　'123.46'　という結果になる


  [ parseInt(s,n) ]
文字列を数値に変換する方法   第１引数に文字列を、第２引数に解釈したい進数の数値を書く
第１引数の文字列は、スペースや改行は無視され、数値として解釈できるところまでを解釈し、まったくできなければ NaN を返す
第２引数の数値は、省略してしまうと、入力した値によって解釈される進数が変わってしまうので、なるべく指定するようにする 
具体的には、  parseInt('15point',10)  で結果は 15 になる


  [ parseFloat(s) ]
"s"に数値として解釈したい文字列を渡すと、浮動小数点数として返してくれる
文字列は先頭から見ていき、ホワイトスペースは無視する、解釈できない時は NaN を返す、という点は parseInt() と同じ
具体的には  parseFloat('12.34')  で結果は 12.34 となる


