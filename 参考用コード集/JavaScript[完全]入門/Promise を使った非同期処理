

• 例文


console.log('処理１');

new Promise((resolve, reject) => {
  setTimeout(() => {
    console.log('処理A');
    resolve();
  }, 100);
})
.then(d => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log('処理B');
      resolve();
    }, 100);
  });
})
.then(d => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log('処理C');
      resolve();
    }, 100);
  });
})
.then(d => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log('処理D');
      resolve();
    }, 100);
  });
})
.then(d => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      console.log('処理E');
      resolve();
    }, 100);
  });
});

console.log('処理２');



// 結果
処理１
処理2
処理A
処理B
処理C
処理D
処理E


- - - - - - - - - - - - - - - -


* 入れ子を解消しただけでは、それほど見やすくはなっていない
  そこで、同じ処理を関数にまとめて整理する
  非同期処理をおこなうには、関数を上手くつかい、処理を見やすくする工夫が必要になる
  

- - - - - - - - - - - - - - - -


• 処理を見やすくした版


// 待機用の関数
function wait(msg) {
  // Promiseオブジェクトを戻り値にする
  return new Promise((resolve , reject) => {
    setTimeout(() => {
      console.log(msg);
      resolve();
    }, 100);
  });
};

console.log('処理１');

wait('処理A')
.then(d => {
  return wait('処理B');
})
.then(d => {
  return wait('処理C');
})
.then(d => {
  return wait('処理D');
})
.then(d => {
  return wait('処理E');
});

console.log('処理２');



