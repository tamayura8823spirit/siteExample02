

[ 画面レイアウト ]

• #imageArea
  • #noView : 画像のドロップを促す div 要素
  • #view :   画像を表示する canvas 要素
  • #file :   ファイル入力欄

• #controlArea
  • #ef1 :    [セピア] ボタン
  • #efBack : [戻す] ボタン
  • #efSave : [保存] ボタン
  • #efDel :  [削除] ボタン

• #commentArea
  • #commentAtatus : 文字数を表示する span 要素
  • #comment : [コメント] 欄

• #sendArea
  • #send : [投稿] ボタン

• #postListArea
  • 投稿された内容をタイムライン表示



- - - - - -


[ JavaScritpt ファイル一覧 ]

• common.js
  全エリア共通で使う処理
  具体的には、各ボタンをクリックした後の表示を調整する

• storage.js
   Web ページを読み込んだときに、以前の操作状態を復帰するための処理
   Web ページの JavaScript にある 「ストレージ機能」 を使い、読み込んだ画像や、書き込んだコメントを保存する
  保存したデータをもとに、元の表示状態を復元する

• imageArea.js
   #imageArea の処理
  ドラッグ＆ドロップでファイルを読み込む処理や、エリアのクリックでファイル読み込みダイアログを開く処理、などがある
  この領域では、ローカルファイルの読み込みを学ぶ

• controlArea.js
   #controlArea の処理、ボタンによる各種処理をまとめている
   [セピア] ボタンをクリックすると、 Canvas から画素を取り出して、全てのガセをセピア色に変換する
   [戻る] ボタンをクリックすると、表示している画像を PNG 形式の画像ファイルとしてローカルに保存する
  またコメント欄に入力した文字列も、テキストファイルとしてローカルに保存する
  この処理を学ぶことで、Webページで作成したデータを、どのようにローカルに保存するかがわかる
   [削除] ボタンをクリックすると、画像ファイルを読み込む前、そしてコメントを入力する前の状態に戻す

• commentArea.js
   #controlArea の処理
  コメント欄に文字を記入すると、リアルタイムに文字数を表示し、一定の文字数を超えると、警告色に変えて文字数を表示する
  英数字の入力だけなら、単純に入力状態を見て表示すれば良いが、日本語では IME の変換時は、表示を反映しないようにした方が望ましい
  そうした IME の状態を見ながら、文字数を表示する

• sendArea.js
   #sendArea の処理
  画面や文字列のデータを、画面遷移をせずにサーバーに送信し、完了した状態で #postListArea の表示を更新して、送信した情報を反映する
  画像というバイナリデータと、文字列のデータを混ぜて、 fetch() でサーバーに送る

• dateFormat.js
  日付の表示をうまく加工するプログラム、タイムラインの表示ように使う

• postListArea.js
   #postListArea の処理
  過去に投稿した画像やコメントが、タイムラインとして表示される
  サーバーから JSON を受け取って、その JSON をもとに表示することで、ページ遷移をせずに必要に応じてサーバ０からデータを取り、Webページに表示できる

  
  
  
