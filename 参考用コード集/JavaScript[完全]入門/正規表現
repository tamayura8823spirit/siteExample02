

[ 正規表現 ]
正規表現とは、文字と記号を使い、文字のパターンを指定して、検索をしたり置換したりする方法のこと
また、" フラグ "と呼ばれる、一致ルールを指定するときにつかう指定方法もある



[ 正規表現の書き方 ]
1つ目は "正規表現リテラル"    「/」スラッシュで囲んだ中に正規表現をかき、そこにフラグをつけるやり方
２つ目は "new RegExp()"　    第１引数に正規表現をかき、第２引数にフラグをかくやり方

いずれの2つも、フラグはなくても構わない
通常は、正規表現リテラルを使い、変数を使いたい場合などに "new RegExp()" を使う

  ①
  /正規表現のパターン/フラグ

  ②
  new RegExp('正規表現のパターン' , 'フラグ')



[ 正規表現でよく使う記号や書式 ]

A+        |   1個以上のA（可能な限り長く）
A*        |   0個以上のA（可能な限り長く）
A+?       |   1個以上のA（可能な限り短く）
A*?       |   0個以上のA（可能な限り短く）
A?        |   0または1個のA
A{3}      |   3個のA
A{3,}     |   3個以上のA
A{3,5}    |   3～5個のA
A|B       |   AまたはB
ABC|DEF   |   ABCまたはDEF
[ABC]     |   A,B,Cのいずれか1文字
[A-C]     |   A～Cのいずれか1文字
[^ABC]    |   A,B,C以外のいずれか1文字
.         |   任意の1文字
.+        |   任意の1以上の文字
^A        |   Aで始まる文字列
A$        |   Aで終わる文字列
A.+B      |   『A（任意の文字列）B』（可能な限り長く）
A.+?B     |   『A（任意の文字列）B』（可能な限り短く）
A[^\/]+B  |   『A（『/』を含まない文字列）B』



[ 正規表現の、その他の記号 ]

\d    |   数値（[0-9]と同じ）
\D    |   数値以外（[^0-9]と同じ）
\w    |   英数（[A-Za-z0-9_]と同じ）
\W    |   英数以外（[^A-Za-z0-9_]と同じ）
\n    |   改行
\r    |   復帰
\t    |   タブ文字
\s    |   スペース、タブ、改ページ、改行を含む、1つの空白文字
\S    |   \s以外の文字



[ 正規表現で知っていると役立つ書式（グループ化） ]

(?:aaa)       |   『aaa』に一致するが、後で『$番号』として取り出さない
aaa(?=bbb)    |   『aaa』に『bbb』が続く場合に一致。『bbb』は検索結果に含めない。
aaa(?!bbb)    |   『aaa』に『bbb』が続かない場合に一致。『bbb』は検索結果に含めない。



[ 正規表現のフラグ ]

g       |   全部を置換する   （gがなければ最初の1つのみを置換）
i       |   英語の大文字、小文字を区別せずに扱う    （iがなければ区別する）
m       |   文頭『^』や文末『$』の一致処理を、各行の行頭や行末にも適用する    （mがなければ、文頭『^』や文末『$』は文字列の先頭と末尾のみに適用）



[ 正規表現を利用するメソッド ]
.exec(s)          |   文字列s の中で一致するものを検索する   一致するものがあれば、最初の情報を格納した配列を、なければnull を返す
.test(s)          |   文字列s の中で一致するものがあれば" true "を、なければ" false "を返す
.match(r)         |   (r) が一致するか検索する    あれば最初の情報を格納した配列を、なければnull を返す   gフラグ設定時は、一致した全ての文字列を格納した配列を返す
.matchAll(r)      |   (r) が一致する全ての結果を格納した iterator(反復子） を返す
.search(r)        |   (r) が一致するか検索する    あれば最初の位置の数値を、なければ -1 を返す
.replace(r,s)     |   お察し
.split(r)         |   正規表現(r)が一致する場所で、文字列を分割して配列にする


