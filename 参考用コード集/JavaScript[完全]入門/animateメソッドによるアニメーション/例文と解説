

[ .animate()メソッドの使い方 ]

*  第１引数に 「配列 ＞ オブジェクト」 、もしくは 「オブジェクト ＞ 配列」 の入れ子形式で、スタイル設定を書く


構文①

.animate([
  {スタイル名：　値, スタイル名：　値, スタイル名：　値},
  {スタイル名：　値, スタイル名：　値, スタイル名：　値},
  {スタイル名：　値, スタイル名：　値, スタイル名：　値}
], b )


構文②

.animate({
  スタイル名：　[値, 値, 値],
  スタイル名：　[値, 値, 値],
  スタイル名：　[値, 値, 値]
}, b )


* どちらの書き方にしても 「配列の並び」 に沿って、順番にスタイルが変化していく
* 要素 [0] が最初の状態で、要素 [末尾] が最後の状態になる、そして最後の状態が終わると" 変化前の状態 "に戻る

* 第２引数( b )には" プロパティ "を指定する



[ アニメーションのプロパティ ]
delay     |   アニメーションの開始を遅らせるミリ秒
duration  |   アニメーションをおこなうミリ秒
easing    |   エフェクトの動き方
endDelay  |   アニメーション終了後、次の処理に移行するミリ秒


[  easing の値 ]
ease        |   開始と完了を滑らかに
linear      |   一定
ease-in     |   ゆっくり開始
ease-out    |   ゆっくり完了
ease-in-out |   ゆっくり開始、ゆっくり完了



- - - - - -



* 戻り値の Animation　オブジェクトには、多くのプロパティやメソッド、イベントがある
  以下にプロパティとメソッドのいくつかを示す



[ Animation オブジェクトのプロパティ ]
.currentTime  |   アニメーションの現在時間ミリ秒
.finished     |   アニメーションの終了時に処理をおこなう Promise
.onfinish     |   finish イベントの関数の設定をおこなう


[ Animation オブジェクトのメソッド ]
.play()     |   アニメーションを再生もしくは再開
.pause()    |   再生を一時停止
.reverse()  |   アニメーションを逆再生
.finish()   |   再生を終了
.cancel()   |   すべてのキーフレームを消去し、再生を中断



ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー



        "  ボックスが丸になりながら回転したあと、色が変化しながら、ぴょこんと跳ねるアニメーション  "


• 例文


[ HTML ]
<div class="animArea">
  <div class="box"></div>
</div>




[ CSS ]
/* アニメーション用の領域 */
.animArea {
  position: relative;
  width: 100px;
  height: 400px;
  margin: 50px auto;
  background-color: #eee;
}

/* アニメーションするボックス */
.box {
  position: absolute;
  width: 100px;
  height: 100px;
  top: 300px;
  background-color: #faa;
}




[ JavaScript ]
// .box の要素を選択
const elBox = document.querySelector('.box');

// アニメーション開始
anim(elBox);

// アニメーション関数
async function anim(el) {
  // 「四角 → 丸＆回転 → 四角」のアニメーション
  await el.animate(
    {
      borderRadius: ['0px', '50px', '0px'],
      transform: ['', 'rotate(720deg)', ''],
    },
    1500  // 1500ミリ秒かけて変化
  ).finished; // Promiseを得る

  // 「下＆赤 → 上＆青 → 下＆赤」のアニメーション
  await el.animate(
    [
      { top: '300px', backgroundColor: '#faa' },
      { top: '0px', backgroundColor: '#aaf' },
      { top: '300px', backgroundColor: '#faa' },
    ],
    {
      delay: 250, // 250ミリ秒遅らせて開始
      duration: 750, // 750ミリ秒かけて変化
      easing: 'ease-in-out', // 変化の種類はease-in-out
      endDelay: 250, // 250秒遅らせて終了
    }
  ).finished; // Promiseを得る

  anim(el); // アニメーション再実行
}



// 解説
 .finished プロパティを使い、Promise という非同期処理のオブジェクトを得る
この Promise オブジェクトの前に" await "をつけることで、 async 関数内では、その処理を待ってから、次の処理に進むようになる

最後に、同じアニメーション処理をふたたび呼び出している
こうすることで、複数の連続した動きをするアニメーションを繰り返すことができる



