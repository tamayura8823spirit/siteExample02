
        本質その１  ＝   " JavaScriptの関数は定義時の文脈で実行される "

ここでいう「文脈」とは、「その関数が参照可能な外部変数」　のこと
そして、「定義時の」というのは、関数の実行時ではなく、あくまでその関数が定義されたタイミングでの文脈、ということ
つまりこれらを纏めると、
ここでいう「文脈」とは、「その関数が参照可能な外部変数」　のことm止めると
これらをシンプルに表したものが以下のコードになる

- - - - - - - - - -
var scope = 'global';
 
function func1() {
    console.log(scope);
}
 
function func2() {
    var scope = 'local';
 
    func1();
}
 
func1();
func2();

// 結果
global
global
- - - - - - - - - -

func1は外部変数「scope」の値を出力する
定義時のscopeの値は’global’なので、21行目でのfunc1の実行結果は「global」になる

次に、func1をfunc2の内部で実行している
このタイミングではfunc1の外部変数scopeの値は’local’になっているにもかかわらず、ここで出力される値は’global’となる

このことは関数はいかなるタイミングや場所で実行されようとも、定義時のコンテキストで実行されるということを表している



        本質その２   ＝   " JavaScriptの関数は第１級オブジェクトである "







