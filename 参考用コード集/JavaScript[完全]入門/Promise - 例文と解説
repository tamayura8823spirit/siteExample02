

* Promise オブジェクトは
   "new Promise(関数)" と、コールバック関数を引数にしてインスタンスを作る
  コールバック関数は
   "resolve(解決)" と "reject(拒否)" という、2つの関数を引数に取る

* そして、時間がかかる処理をしたあと、正常に終了すれば "resolve()" を
                             異常に終了すれば "reject()" を、実行する


- - - - - - - - - - - - - - - - - - -


    - 構文 -

new Promise((resolve , reject) => {
  時間のかかる処理
  正常に終了したときは  →  resolve()を実行
  異常に終了したときは  →  reject()を実行
})


ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー


* Promise オブジェクトには
   .then(関数) という、処理が終わったあとに、続きの処理をするためのメソッドがある
   .then() のコールバック関数は、 "resolve(解決)" や "reject(拒否)" を実行すると呼び出される

* また、 resolve() と reject() に引数を設定すると、 .then() のコールバック関数で値を受け取れる


- - - - - - - - - - - - - - - - - - - 


    - 構文 -

new Promise((resolve , reject) => {
  時間のかかる処理
  正常に終了したときは  →  resolve(dataA)を実行
  異常に終了したときは  →  reject(dataB)を実行
})
.then(dataA => {
  resolve()を実行したときの処理
} , dataB => {
  reject()を実行したときの処理    // 書かなくてもよい
});


ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー


*  .then() のコールバック関数の戻り値に "Promiseオブジェクト" を書いたとき
  その処理の終了を待って、次の .then() を実行する

* 戻り値が Promiseオブジェクトでないなら、すぐに次の制御に移る


- - - - - - - - - - - - - - - - - - - 


new Promise((resolveA , reject) => {
  時間のかかる処理
  正常に終了したときは  →  resolveA()を実行
})
.then(data => {
  resolveA()を実行したときの処理
  変数P = new Promise((resolveB , reject) => {
    時間のかかる処理
    正常に終了したときは  →  resolveB()を実行
  }
  return 変数P;
})
.then(data => {
  resolveB()を実行したときの処理
  変数P = new Promise((resolveC , reject) => {
    時間のかかる処理
    正常に終了したときは  →  resolveC()を実行
  }
  return 変数P;
});



